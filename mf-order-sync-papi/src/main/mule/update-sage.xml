<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd">
	<sub-flow name="update-sage-flow" doc:id="3890ff18-15e9-44ea-9b90-c77457dd4c76" >
		<ee:transform doc:name="check-sync-success" doc:id="41c6cbfc-91cd-43bc-b582-ec2f49697226">
					<ee:message>
					</ee:message>
			<ee:variables >
				<ee:set-variable variableName="update_order" ><![CDATA[%dw 2.0
output application/json
fun sync_success(payload) =
if(payload.message.totalSuccesses > 0)
true
else 
false

fun order_already_exists(payload)=
if(payload.message.details[0].failureDetails.code[0] == "ORDERID_ALREADY_EXISTS")
true
else
false
---
// check_success(payload)

if (sync_success(payload) or order_already_exists(payload))
true
else
false]]></ee:set-variable>
			</ee:variables>
				</ee:transform>
		<choice doc:name="Choice" doc:id="1d3b119c-0a43-4cbc-a95c-9798ee78f706">
			<when expression="#[vars.update_order]" >
				<flow-ref doc:name="barrett-sync-passed" doc:id="fa68ca04-8aa7-4379-b781-cb87a8c6e0b7" name="barrett-sync-passed"/>
			
</when>
			<otherwise>
				<json-logger:logger doc:name="error-in-sync" doc:id="b83d211c-0769-4537-8492-1751fbd04913" config-ref="JSON_Logger_Config" message="Error in syncing order to Barrett" tracePoint="EXCEPTION">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: "Issue syncing Sage order to Barrett. Order: " ++ vars.orderId 
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="setErrorData" doc:id="8859af4b-c5f0-41bf-83b9-6bf431730746">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="errorData"><![CDATA[output application/json skipNullOn="everywhere"

---
{
	
	"error": {
		"correlationId": vars.correlationId,
		"type": payload.details[0].failureDetails.code[0],
		"message":  payload.details[0].failureDetails.code[0] ,
		"service": Mule::p('app.name')
	}
}
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="jira-ticket-flow" doc:id="d067d8c2-4d0d-4334-b975-8ab8c72c9eb7" name="jira-ticket-flow"/>
			
</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="barrett-sync-passed" doc:id="8406ed0d-f2c5-4672-a047-6762fc3974b2" >
		<json-logger:logger doc:name="start-of-flow" doc:id="7a9ece0e-184a-4e1d-a2ec-02c042e3143b" config-ref="JSON_Logger_Config" message='#["Start of update-sage-flow"]' tracePoint="END">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: "Update flow begins for order " ++ vars.orderId
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="set-request-body" doc:id="acea871f-8be9-48b3-a662-2e63e1ed5bd1">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{"SOH1_5": {"YMFSOS": 13}}


]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="set-variables-for-update-call" doc:id="ae1f11aa-a0ac-459b-ba45-e378b81e131d">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="sageRest" ><![CDATA[%dw 2.0
output application/json
---
{
	
	path: Mule::p('https.sage.sapi.soap.path'),
	method: "PUT",
	queryParams:{
		
		"recordType": Mule::p('https.sage.sapi.soap.params.recordType'),
        "sageObjectKey": Mule::p('https.sage.sapi.soap.params.sageObjectKey'),
	},
	uriParams:
	{
		"orderId": vars.orderId,
       
	},
	body: payload
	
}]]></ee:set-variable>
					
</ee:variables>
				</ee:transform>
				<flow-ref doc:name="update-sage-request" doc:id="53b73470-7e95-4e7a-808c-975c69bb7244" name="send-sage-request-flow"/>
				<ee:transform doc:name="set-update-body" doc:id="914488fb-81de-4627-875b-4c67846e8ad2">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
 {"SOH1_5": {"YMFSOS": 13, "YRELWHSDATM": now()}}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="set-variables-for-update" doc:id="d75a8a76-e275-4743-8e6a-86e1b938b294">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="sagerest"><![CDATA[%dw 2.0
output application/json
---
{
	
	path: Mule::p('https.sage.sapi.soap.path'),
    method: "PUT",
	queryParams:{
		
		"recordType": Mule::p('https.sage.sapi.soap.params.recordType'),
        "sageObjectKey": Mule::p('https.sage.sapi.soap.params.sageObjectKey'),
	},
	uriParams:
	{
		"orderId": vars.orderId,
	},
	body: payload
	
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		<try doc:name="Try" doc:id="17f91bb5-929e-4b0e-af1c-12c33bfa4e06" >
					<flow-ref doc:name="send-sage-request-flow" doc:id="5a2d5d04-b0b9-4884-bf54-31814cd58508" name="send-sage-request-flow" />
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="6df25aa0-28ed-428a-a8dd-b2ed9cabd253" >
					<json-logger:logger doc:name="Falied-to-update" doc:id="7841dad6-7866-491f-8e4a-e485d3d7a6ab" config-ref="JSON_Logger_Config" message='#["Failed to update Sage order status " ++ vars.orderId]'>
								<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: vars.orderId
}]]]></json-logger:content>
							</json-logger:logger>
				</on-error-continue>

					</error-handler>
				
</try>
				<json-logger:logger doc:name="end-of-flow" doc:id="8eaab263-161a-4899-ba1d-d9670c7bfc47" config-ref="JSON_Logger_Config" message='#["End of update-sage-flow"]' tracePoint="END">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: "Update flow ends for order " ++ vars.orderId
}]]]></json-logger:content>
				</json-logger:logger>
			
	</sub-flow>
	
</mule>
